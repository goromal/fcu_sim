<!-- multirotor.launch - Author: James Jackson - BYU - 2016 -->
<!-- This is a launch file that runs the bare minimum requirements to get -->
<!-- gazebo running with a multirotor -->

<launch>
  <arg name="mav_name"            default="mikey"/>
  <arg name="boat_name"           default="boat"/>
  <arg name="color"               default="White"/>
  <arg name="x"                   default="0"/>   	 <!-- ====================== -->
  <arg name="y"                   default="0"/>   	 <!-- = Mikey initial pos == -->
  <arg name="z"                   default="0.1"/> 	 <!-- ====================== -->
  <arg name="yaw"                 default="0"/>
	<arg name="x2"									default="-10.0"/>	 <!-- ====================== -->
	<arg name="y2"									default="0"/>			 <!-- == Boat initial pos == -->
	<arg name="z2"									default="0"/>			 <!-- ====================== -->

  <arg name="world_file" default="boat.world"/>

  <!-- Start Simulator -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find fcu_sim)/worlds/$(arg world_file)"/>
    <arg name="paused" value="false"/>
    <arg name="gui" value="true"/>
    <arg name="verbose" value="true"/>
  </include>

  <!-- Spawn Model in Gazebo -->
  <include file="$(find fcu_sim)/launch/two_mav_spawn.launch">
    <arg name="mav_name"            value="$(arg mav_name)" />
    <arg name="model"               value="$(find fcu_sim)/agents/$(arg mav_name)/$(arg mav_name).xacro" />
    <arg name="x"                   value="$(arg x)"/>
    <arg name="y"                   value="$(arg y)"/>
    <arg name="z"                   value="$(arg z)"/>
		<arg name="x2"                   value="$(arg x2)"/>
    <arg name="y2"                   value="$(arg y2)"/>
    <arg name="z2"                   value="$(arg z2)"/>
    <arg name="yaw"                 value="$(arg yaw)"/>
    <arg name="color"               value="$(arg color)"/>
    <arg name="boat_name"            value="$(arg boat_name)" />
    <arg name="model2"               value="$(find fcu_sim)/agents/$(arg boat_name)/$(arg boat_name).xacro" />
  </include>

  <!-- MAV Controller Nodes -->
  <group ns="$(arg mav_name)">

    <!-- Load common parameters (mass, thrust, rotor configuration) -->
    <rosparam command="load" file="$(find fcu_sim)/agents/$(arg mav_name)/$(arg mav_name).yaml"/>

    <!-- Is Flying Publisher -->
    <node pkg="rostopic" type="rostopic" name="is_flying_pub" args="pub is_flying std_msgs/Bool true"/>

    <!-- PID Position Controller -->
    <rosparam command="load" file="$(find ros_copter)/params/mikey.yaml" ns="controller"/>
    <node name="controller" pkg="ros_copter" type="controller">
      <remap from="estimate" to="ground_truth/odometry"/>
    </node>

    <!-- Waypoint Manager -->
    <node name="waypoint_manager" pkg="ros_copter" type="waypoint_manager.py" output="screen">
      <rosparam command="load" file="$(find fcu_sim)/agents/$(arg mav_name)/boat_waypoints.yaml"/>
      <remap from="waypoint" to="high_level_command"/>
      <remap from="state" to="ground_truth/odometry"/>
    </node>

  </group>

  <!-- BOAT Controller Nodes -->
  <group ns="$(arg boat_name)">

  	<!-- Load controller parameters within namespace-->
  	<rosparam command="load" file="$(find fcu_sim)/agents/$(arg boat_name)/$(arg boat_name).yaml"/>

  	<!-- Boat controller-->
  	<!--<node name="boat_command" pkg="fcu_sim_plugins" type="boat_cmd.py" output="screen" />-->
		<node pkg="fcu_sim_plugins" name="boat_command" type="boat_commander"/>

  </group>

<!-- Joystick Controller, in case joy control is toggled -->

<node pkg="joy" name="joystick" type="joy_node">
	<param name="autorepeat_rate" value="10"/>
</node>

<node pkg="topic_tools" name="joy_throttler" type="throttle" args="messages /joy 10 /joy_throttled" />

</launch>
